<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://github.com/Daotin/issue-blog</id><title>RSS feed of Daotin's issue-blog</title><updated>2024-08-20T02:19:35.911071+00:00</updated><link href="https://github.com/Daotin/issue-blog"/><link href="https://raw.githubusercontent.com/Daotin/issue-blog/master/feed.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><entry><id>https://github.com/Daotin/issue-blog/issues/7</id><title>跨域的时候，post为什么会发送两次请求？</title><updated>2024-08-20T02:19:36.119962+00:00</updated><content type="html"><![CDATA[<h2>什么是预检请求？</h2>
<p>想象你要去一个从未去过的国家旅行。在真正踏上旅程之前，你可能会先打电话给那个国家的海关，问问你是否可以入境，需要带什么证件，是否需要签证等。这个打电话询问的过程，就像是预检请求。</p>
<p>在网络世界中，当你的网页想要访问另一个网站的数据（这就是所谓的跨源请求）时，浏览器有时会先发送一个&quot;预检请求&quot;，就是在问那个网站：&quot;嘿，我可以用这种方式访问你的数据吗？&quot;</p>
<p><strong>预检请求是浏览器在发送实际的跨源请求之前，先向服务器发送的一个特殊的OPTIONS请求，用于检查实际请求是否安全可接受。</strong></p>
<h2>为什么会有预检请求？</h2>
<ul>
<li>安全考虑：就像国家要控制谁可以入境一样，网站也需要控制谁可以访问它们的数据。</li>
<li>保护隐私：预检请求不会包含实际的数据，就像你打电话询问入境要求时，不需要提供你的全部个人信息。</li>
<li>避免麻烦：如果直接发送可能不被允许的请求，就像直接飞到一个国家却被拒绝入境，这样会很麻烦。</li>
</ul>
<p><strong>预检请求的存在是为了增加浏览器和服务器之间交互的安全性，防止恶意的跨域请求滥用用户身份信息或对服务器资源造成威胁。这是一种保护机制，确保只有经过服务器许可的跨域请求才会被执行。</strong></p>
<h2>哪些情况会发起预检请求？</h2>
<blockquote>
<p>[!tip]</p>
<ul>
<li>同源请求：不需要预检，无论请求多么特殊。</li>
<li>跨源请求：可能需要预检，取决于请求的具体特征。</li>
</ul>
</blockquote>
<p>对于同源请求，即使请求很特殊，也不会触发预检请求。这是因为同源策略（Same-Origin Policy）本身就是一种安全机制，浏览器默认信任来自同一源的请求。</p>
<p>比如，</p>
<ul>
<li>使用特殊的&quot;旅行方式&quot;：如果你想骑大象入境（比喻使用 PUT, DELETE 等特殊的 HTTP 方法），而不是普通的步行（GET, POST），海关可能会要求你提前通知。</li>
<li>携带特殊物品：如果你想带一些特殊的物品入境（比如使用自定义的 HTTP 头部，例如，自定义的X-Custom-Header或Authorization ），也需要提前询问。</li>
<li>特殊的行李包装：如果你的行李包装方式很特别（比如，如果Content-Type请求头的值不是以下三种之一，<code>application/x-www-form-urlencoded</code>，<code>multipart/form-data</code>，<code>text/plain</code>，比如发送 application/json 数据），也可能需要预先检查。</li>
</ul>
<p>举个具体的例子：</p>
<p>假设你有一个网页游戏，需要向另一个网站的服务器发送玩家的高分数据。</p>
<pre><code class="language-js">fetch(&#x27;https://other-website.com/api/scores&#x27;, {
  method: &#x27;POST&#x27;,
  headers: {
    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,
    &#x27;X-Player-Id&#x27;: &#x27;12345&#x27;
  },
  body: JSON.stringify({ score: 1000 })
})
</code></pre>
<p>这个请求会触发预检，因为：</p>
<ul>
<li>它使用了自定义头部（X-Player-Id）</li>
<li>它发送的是 JSON 数据</li>
</ul>
<p>浏览器会先发送一个 OPTIONS 请求（预检请求），询问服务器是否允许这样的请求。如果服务器答应了，真正的 POST 请求才会被发送。</p>
]]></content><link href="https://github.com/Daotin/issue-blog/issues/7"/><category term="javascript"/><published>2024-08-20T02:19:14+00:00</published></entry><entry><id>https://github.com/Daotin/issue-blog/issues/6</id><title>行尾符号LF和CRLF</title><updated>2024-08-20T02:19:36.238216+00:00</updated><content type="html"><![CDATA[<h2>一般在不同的系统，行业通用的做法是如何使用行尾符号的？</h2>
<p>在不同操作系统上，行尾符号的使用有一定的行业惯例和最佳实践。以下是不同系统以及在跨平台开发中常见的行尾符号使用方式：</p>
<h3>不同操作系统的行尾符号惯例</h3>
<ol>
<li>
<p><strong>Unix/Linux 和 macOS</strong>：</p>
<ul>
<li>使用 LF (Line Feed)，即 <code>\n</code> 作为行尾符号。</li>
<li>这是大多数服务器和开发环境的默认行尾符号。</li>
</ul>
</li>
<li>
<p><strong>Windows</strong>：</p>
<ul>
<li>使用 CRLF (Carriage Return and Line Feed)，即 <code>\r\n</code> 作为行尾符号。</li>
<li>Windows上的大多数文本编辑器默认使用这种行尾符号。</li>
</ul>
</li>
</ol>
<h3>行业通用的做法</h3>
<ol>
<li>
<p><strong>统一行尾符号</strong>：</p>
<ul>
<li>在跨平台项目中，统一使用LF行尾符号是比较常见的做法，因为大多数现代版本控制系统和代码编辑器都可以很好地处理LF行尾符号。</li>
<li>
可以在项目根目录下创建 <code>.editorconfig</code> 文件，配置行尾符号格式：<pre><code class="language-ini">root = true

[*]
end_of_line = lf
charset = utf-8
</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>Git的行尾符号转换</strong>：</p>
<ul>
<li>
Git 提供了 <code>core.autocrlf</code> 选项来处理行尾符号转换：<ul>
<li><code>core.autocrlf=true</code>：在Windows上检出代码时将LF转换为CRLF，提交代码时将CRLF转换为LF。</li>
<li><code>core.autocrlf=input</code>：在检出代码时不转换行尾符号，提交代码时将CRLF转换为LF。这种设置适用于开发人员在Unix/Linux或macOS系统上。</li>
<li><code>core.autocrlf=false</code>：不进行任何转换。这种设置适用于所有开发人员都使用统一的行尾符号，例如通过<code>.editorconfig</code>来强制执行LF行尾符号。</li>
</ul>
</li>
</ul>
<p>例如，在Windows系统上可以设置：</p>
<pre><code class="language-sh">git config --global core.autocrlf true
</code></pre>
<p>在Unix/Linux或macOS系统上可以设置：</p>
<pre><code class="language-sh">git config --global core.autocrlf input
</code></pre>
</li>
<li>
<p><strong>.gitattributes 文件</strong>：</p>
<ul>
<li>通过 <code>.gitattributes</code> 文件来强制特定文件类型使用特定的行尾符号。</li>
<li>
在项目根目录下创建 <code>.gitattributes</code> 文件，内容如下：<pre><code class="language-text">* text=auto
*.sh text eol=lf
*.bat text eol=crlf
</code></pre>
</li>
<li>这可以确保Shell脚本使用LF行尾符号，而批处理文件使用CRLF行尾符号。</li>
</ul>
</li>
</ol>
<h3>总结</h3>
<p>行业通用的做法是尽量统一使用LF行尾符号，尤其是在跨平台项目中，通过配置<code>.editorconfig</code>、<code>.gitattributes</code>文件和Git的<code>core.autocrlf</code>选项，可以有效地管理和处理行尾符号，确保代码在不同操作系统上的一致性和兼容性。</p>
<h2>如何配置统一使用LF行尾符号？</h2>
<p>要统一使用LF行尾符号，可以通过配置<code>.editorconfig</code>文件、<code>.gitattributes</code>文件以及Git的<code>core.autocrlf</code>选项来实现。以下是具体步骤：</p>
<h3>1. 使用 <code>.editorconfig</code> 文件</h3>
<p><code>.editorconfig</code> 文件可以帮助你在不同编辑器和IDE中统一代码风格，包括行尾符号。</p>
<p>在项目根目录下创建一个名为 <code>.editorconfig</code> 的文件，并添加以下内容：</p>
<pre><code class="language-ini">root = true

[*]
end_of_line = lf
charset = utf-8
</code></pre>
<p>这将告诉支持 EditorConfig 的编辑器使用 LF 作为所有文件的行尾符号，并使用 UTF-8 编码。</p>
<h3>2. 配置 <code>.gitattributes</code> 文件</h3>
<p>在项目根目录下创建一个名为 <code>.gitattributes</code> 的文件，并添加以下内容：</p>
<pre><code class="language-text">* text=auto
*.sh text eol=lf
*.js text eol=lf
*.css text eol=lf
*.html text eol=lf
</code></pre>
<p>这将确保在 Git 中所有文件使用自动检测的文本模式，而对于特定类型的文件（例如 <code>.sh</code>、<code>.js</code>、<code>.css</code>、<code>.html</code>），强制使用 LF 作为行尾符号。</p>
<h3>3. 配置 Git 的 <code>core.autocrlf</code> 选项</h3>
<p>根据操作系统的不同，配置 Git 的 <code>core.autocrlf</code> 选项：</p>
<ul>
<li>
<p><strong>在 Unix/Linux 和 macOS 系统上</strong>：</p>
<pre><code class="language-sh">git config --global core.autocrlf input
</code></pre>
<p>这将告诉 Git 检出代码时不转换行尾符号，提交代码时将 CRLF 转换为 LF。</p>
</li>
<li>
<p><strong>在 Windows 系统上</strong>：</p>
<pre><code class="language-sh">git config --global core.autocrlf true
</code></pre>
<p>这将告诉 Git 检出代码时将 LF 转换为 CRLF，提交代码时将 CRLF 转换为 LF。</p>
</li>
</ul>
<h3>4. 将现有文件转换为 LF 行尾符号</h3>
<p>如果你有现有的文件需要转换为 LF 行尾符号，可以使用以下命令进行批量转换：</p>
<ul>
<li>
<p><strong>在 Unix/Linux 和 macOS 系统上</strong>：</p>
<pre><code class="language-sh">find . -type f -exec dos2unix {} \;
</code></pre>
</li>
<li>
<p><strong>在 Windows 系统上</strong>：</p>
<p>使用 Git Bash 或其他 Unix 风格的终端运行以下命令：</p>
<pre><code class="language-sh">find . -type f -exec dos2unix {} \;
</code></pre>
</li>
</ul>
<p>或者使用 PowerShell 脚本：</p>
<pre><code class="language-powershell">Get-ChildItem -Recurse -File | ForEach-Object {
    (Get-Content -Raw -Path $_.FullName).Replace(&quot;`r`n&quot;, &quot;`n&quot;) | Set-Content -NoNewline -Path $_.FullName
}
</code></pre>
<h3>总结</h3>
<p>通过上述步骤，你可以在项目中统一使用 LF 行尾符号。使用 <code>.editorconfig</code> 文件和 <code>.gitattributes</code> 文件可以确保编辑器和 Git 都按照统一的行尾符号处理文件，从而避免由于行尾符号不同导致的问题。</p>
<h2>如果当前是CRLF，并且设置了 <code>git config --global core.autocrlf true</code> ，会发生什么？</h2>
<p>如果当前的文件使用的是CRLF行尾符号，并且你在Git中设置了<code>git config --global core.autocrlf true</code>，会发生以下情况：</p>
<ol>
<li>
<p><strong>检出文件时</strong>：</p>
<ul>
<li>Git会将仓库中的LF行尾符号转换为CRLF行尾符号。这是因为<code>core.autocrlf</code>配置为<code>true</code>会自动在Windows系统上将所有检出的文件转换为CRLF，以适应Windows系统的行尾符号惯例。</li>
</ul>
</li>
<li>
<p><strong>提交文件时</strong>：</p>
<ul>
<li>Git会将工作目录中的CRLF行尾符号转换为LF行尾符号，然后将文件提交到仓库中。这意味着，尽管你的工作目录中的文件使用的是CRLF行尾符号，但一旦提交到Git仓库中，它们将被转换为LF行尾符号存储。</li>
</ul>
</li>
</ol>
<h3>具体影响</h3>
<ol>
<li>
<p><strong>避免行尾符号问题</strong>：</p>
<ul>
<li>这种配置可以避免在跨平台开发中常见的行尾符号问题。例如，当Windows用户和Unix/Linux或macOS用户共同开发一个项目时，可以确保仓库中的行尾符号一致，避免因行尾符号不同而导致的合并冲突和差异问题。</li>
</ul>
</li>
<li>
<p><strong>文件内容一致性</strong>：</p>
<ul>
<li>尽管在Windows上工作目录中的文件使用的是CRLF，但由于在提交时Git会将其转换为LF，因此仓库中存储的文件行尾符号始终是LF。这保证了文件内容的一致性。</li>
</ul>
</li>
<li>
<p><strong>编辑器的影响</strong>：</p>
<ul>
<li>Windows上的一些文本编辑器（如Notepad）对LF行尾符号支持不佳，可能导致显示和编辑问题。而配置<code>core.autocrlf=true</code>可以让检出的文件使用CRLF，从而避免这些问题。</li>
</ul>
</li>
</ol>
<h3>需要注意的事项</h3>
<ol>
<li>
<p><strong>现有文件的转换</strong>：</p>
<ul>
<li>如果项目中已有大量文件使用的是CRLF行尾符号，在配置<code>core.autocrlf=true</code>后，第一次提交时可能会看到大量文件被修改，因为Git会将它们的行尾符号转换为LF。</li>
</ul>
</li>
<li>
<p><strong>提交前检查</strong>：</p>
<ul>
<li>在第一次提交前，可以使用<code>git status</code>和<code>git diff</code>检查哪些文件将被修改，以确保没有意外的变更。</li>
</ul>
</li>
<li>
<p><strong>团队协作</strong>：</p>
<ul>
<li>确保团队中的所有成员都了解并统一使用相同的Git配置，以避免由于行尾符号处理不一致导致的问题。</li>
</ul>
</li>
</ol>
<h3>总结</h3>
<p>配置<code>git config --global core.autocrlf true</code>可以帮助在Windows系统上工作的开发者自动处理行尾符号转换问题，确保提交到Git仓库中的文件使用一致的LF行尾符号。这种配置在跨平台开发中非常有用，但需要团队成员了解这一配置，并可能需要对现有文件进行一次性处理以统一行尾符号。</p>
]]></content><link href="https://github.com/Daotin/issue-blog/issues/6"/><category term="javascript"/><published>2024-08-20T01:34:51+00:00</published></entry><entry><id>https://github.com/Daotin/issue-blog/issues/5</id><title>typeof和instanceof的区别</title><updated>2024-08-20T02:19:36.353624+00:00</updated><content type="html"><![CDATA[<p><code>typeof</code> 和 <code>instanceof</code> 都是 JavaScript 中用于类型检查的操作符，但它们的使用场景和功能有所不同。</p>
<p><code>typeof</code> 用于检测一个变量的数据类型。它返回一个字符串，表示变量的类型，比如 <code>&quot;string&quot;</code>、<code>&quot;number&quot;</code>、<code>&quot;boolean&quot;</code>、<code>&quot;undefined&quot;</code>、<code>&quot;object&quot;</code>、<code>&quot;function&quot;</code>、以及 ES6 引入的 <code>&quot;symbol&quot;</code>。<code>typeof</code> 适用于基本数据类型的判断，尤其是当你不确定变量是否已定义或是否为基本类型时。此外，对于引用类型的对象，<code>typeof</code> 通常返回 <code>&quot;object&quot;</code>，但需要注意的是，对 <code>null</code> 执行 <code>typeof</code> 也会返回 <code>&quot;object&quot;</code>，这是一种历史遗留的设计问题。</p>
<blockquote>
<p>[!warning]
其中数组、对象、null都会被判断为object，其他判断都正确。</p>
</blockquote>
<p>相比之下，<code>instanceof</code> 用于检测一个对象是否为某个构造函数的实例。它通过检查对象的原型链来判断，返回一个布尔值。<code>instanceof</code> 主要应用于判断复杂类型，比如自定义类实例或数组等。它能够更准确地识别出对象的具体类型，尤其是在需要区分对象的继承关系或具体类型时。</p>
<p>总结来说，<code>typeof</code> 适合用于判断基本数据类型，而 <code>instanceof</code> 则适用于检测对象是否属于特定的类或构造函数。两者结合使用，可以在不同场景下进行灵活的类型检查。</p>
]]></content><link href="https://github.com/Daotin/issue-blog/issues/5"/><category term="javascript"/><published>2024-08-16T07:19:51+00:00</published></entry><entry><id>https://github.com/Daotin/issue-blog/issues/4</id><title>水平垂直居中的方案</title><updated>2024-08-20T02:19:36.435868+00:00</updated><content type="html"><![CDATA[<p>1、有固定的宽度
方法1：absolute + 负margin
方法2：absolute + margin: auto</p>
<p>2、无固定的宽度
方法1：absolute + transform反向偏移
方法2：flex布局</p>
<p><a href="https://daotin.github.io/fe-blog/posts/2021/07/27/%E5%9D%97%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.html">https://daotin.github.io/fe-blog/posts/2021/07/27/%E5%9D%97%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.html</a></p>
]]></content><link href="https://github.com/Daotin/issue-blog/issues/4"/><category term="css"/><published>2024-08-16T06:32:26+00:00</published></entry><entry><id>https://github.com/Daotin/issue-blog/issues/3</id><title>CSS几种定位的规则、定位参照物、对文档流的影响</title><updated>2024-08-20T02:19:36.505256+00:00</updated><content type="html"><![CDATA[<ol>
<li>
<p><strong>静态定位 (<code>static</code>)</strong>：</p>
<ul>
<li><strong>规则</strong>：默认定位，元素按文档流正常排列。</li>
<li><strong>定位参照物</strong>：无。</li>
<li><strong>对文档流影响</strong>：不影响，元素保持在文档流中。</li>
<li><strong>应用场景</strong>：默认使用，适合大部分情况。</li>
</ul>
</li>
<li>
<p><strong>相对定位 (<code>relative</code>)</strong>：</p>
<ul>
<li><strong>规则</strong>：相对于元素自身的原始位置进行偏移。</li>
<li><strong>定位参照物</strong>：元素自身的位置。</li>
<li><strong>对文档流影响</strong>：占据原位置，不脱离文档流。具体来说，当你使用 position: relative 时，该元素会保持在文档流中的原始位置，但你可以使用 left、right、top 和 bottom 属性来调整该元素相对于其原始位置的偏移量。元素仍然会占据其在文档流中的原始位置，只是视觉上会移动。所以，可能导致覆盖到其他元素。</li>
<li><strong>应用场景</strong>：对元素做微调，保持其在文档流中的位置。</li>
</ul>
</li>
<li>
<p><strong>绝对定位 (<code>absolute</code>)</strong>：</p>
<ul>
<li><strong>规则</strong>：相对于最近的已定位祖先元素（<code>relative</code>、<code>absolute</code>或<code>fixed</code>）进行定位；若无，则相对于<code>&lt;html&gt;</code>定位。</li>
<li><strong>定位参照物</strong>：最近的已定位祖先元素或<code>&lt;html&gt;</code>。</li>
<li><strong>对文档流影响</strong>：脱离文档流，不占据空间。</li>
<li><strong>应用场景</strong>：需要精确控制元素位置的场景，如浮动面板或弹出框。</li>
</ul>
</li>
<li>
<p><strong>固定定位 (<code>fixed</code>)</strong>：</p>
<ul>
<li><strong>规则</strong>：相对于浏览器窗口进行定位。</li>
<li><strong>定位参照物</strong>：浏览器窗口。</li>
<li><strong>对文档流影响</strong>：脱离文档流，不占据空间。</li>
<li><strong>应用场景</strong>：固定在页面某个位置不随滚动条滚动，如固定导航栏。</li>
</ul>
</li>
<li>
<p><strong>粘性定位 (<code>sticky</code>)</strong>：</p>
<ul>
<li><strong>规则</strong>：元素在跨越某个阈值前表现为相对定位，超出阈值后表现为固定定位。比如，top: 10px 是相对于视口顶部的偏移量，而不是相对于其父元素或其他元素。当元素达到这个偏移位置时，它就会“粘”在那个位置。</li>
<li><strong>定位参照物</strong>：最近的滚动容器（通常是<code>&lt;html&gt;</code>）。</li>
<li><strong>对文档流影响</strong>：占据空间，但在特定条件下会脱离文档流。</li>
<li><strong>应用场景</strong>：如表头随滚动固定在顶部的效果。</li>
</ul>
</li>
</ol>
]]></content><link href="https://github.com/Daotin/issue-blog/issues/3"/><category term="css"/><published>2024-08-16T06:21:23+00:00</published></entry><entry><id>https://github.com/Daotin/issue-blog/issues/2</id><title>script、script async 和 script defer 的区别</title><updated>2024-08-20T02:19:36.622889+00:00</updated><content type="html"><![CDATA[<ol>
<li>
<p><strong><code>script</code></strong>: </p>
<ul>
<li>默认情况下同步执行，会阻塞页面解析。</li>
<li><strong>应用场景</strong>：一般用于必须在页面加载前执行的脚本，如动态内容生成。</li>
</ul>
</li>
<li>
<p><strong><code>script async</code></strong>: </p>
<ul>
<li>异步执行，脚本下载完成后立即执行，不会阻塞页面解析。</li>
<li><strong>应用场景</strong>：适用于独立于其他脚本或DOM的脚本，如广告或统计脚本。</li>
</ul>
</li>
<li>
<p><strong><code>script defer</code></strong>: </p>
<ul>
<li>异步执行，但会在HTML解析完成后、<code>DOMContentLoaded</code>事件前按顺序执行。</li>
<li><strong>应用场景</strong>：用于需要在DOM解析完后执行的脚本，如初始化脚本。</li>
</ul>
</li>
</ol>
<p><strong>注意事项</strong>：</p>
<ul>
<li><code>async</code>和<code>defer</code>只对外部脚本有效，内联脚本无效。</li>
<li>使用<code>defer</code>时，确保脚本间的执行顺序。</li>
</ul>
]]></content><link href="https://github.com/Daotin/issue-blog/issues/2"/><category term="html"/><published>2024-08-16T05:52:24+00:00</published></entry><entry><id>https://github.com/Daotin/issue-blog/issues/1</id><title>demo</title><updated>2024-08-20T02:19:36.699595+00:00</updated><content type="html"><![CDATA[<p>demodemo</p>
]]></content><link href="https://github.com/Daotin/issue-blog/issues/1"/><category term="demo"/><published>2024-08-16T02:37:19+00:00</published></entry></feed>